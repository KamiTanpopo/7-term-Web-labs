from datetime import datetime, timedelta
import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor


TOKEN = '-'
API_KEY = '-'

bot = Bot(TOKEN)
dp = Dispatcher(bot)


def get_current_weather(city: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={API_KEY}'
    response = requests.get(url)
    data = response.json()

    description = data['weather'][0]['description']
    temperature = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    wind_speed = data['wind']['speed']

    current_weather = (f'üíô–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ üìå{city}üìå: \n'
                       f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature:.0f}¬∞C, '
                       f'–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like:.0f}¬∞C. \n'
                       f'–í–æ–ª–æ–≥—ñ—Å—Ç—å {humidity}%, –≤—ñ—Ç–µ—Ä {wind_speed} –º/—Å.')
    return current_weather


def get_tomorrow_weather(city: str) -> str:
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&units=metric&appid={API_KEY}'
    response = requests.get(url)
    data = response.json()

    forecast_list = data['list']
    tomorrow_date = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

    for forecast in forecast_list:
        forecast_date = forecast['dt_txt'].split(' ')[0]
        if forecast_date == tomorrow_date:
            description = forecast['weather'][0]
            min_temp = forecast['main']['temp_min']
            max_temp = forecast['main']['temp_max']
            humidity = forecast['main']['humidity']
            wind_speed = forecast['wind']['speed']

            tomorrow_weather = (f'üíõ–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: \n'
                                f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ñ–¥ {min_temp:.0f} –¥–æ {max_temp:.0f}¬∞C. \n'
                                f'–í—ñ—Ç–µ—Ä {wind_speed} –º/—Å, –≤–æ–ª–æ–≥—ñ—Å—Ç—å {humidity}%.')
            return tomorrow_weather

    return '–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.'


@dp.message_handler(commands=['weather'])
async def handle_weather_command(message: types.Message):
    try:
        city = message.text.split('/weather ')[1]
        current_weather = get_current_weather(city)
        tomorrow_weather = get_tomorrow_weather(city)
        response = f'{current_weather}\n\n{tomorrow_weather}'
    except:
        response = '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞.'
    await message.reply(response)


@dp.message_handler(commands=['start'])
async def handle_start_command(message: types.Message):
    response = (
        "–ü—Ä–∏–≤—ñ—Ç!üåü –Ø –±–æ—Ç, —è–∫–∏–π –Ω–∞–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É.\n"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather.\n"
        "–ü—Ä–∏–∫–ª–∞–¥: /weather –ö–∏—ó–≤"
    )
    await message.reply(response)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)